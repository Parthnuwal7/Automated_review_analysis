"""Generate sample review data for testing the sentiment analysis pipeline."""

import csv
import random
from datetime import datetime, timedelta
from typing import List, Dict
import os
from pathlib import Path

def generate_sample_reviews() -> List[Dict[str, str]]:
    """Generate sample reviews in both Hindi and English."""
    
    # Sample English reviews
    english_reviews = [
        "The website is very slow and difficult to navigate. Forms take too long to load.",
        "Great interface! The consultation process was smooth and efficient.",
        "I had trouble logging in multiple times. Password reset feature doesn't work properly.",
        "Excellent service. The online portal made it very easy to submit my documents.",
        "The system crashed when I was uploading files. Very frustrating experience.",
        "Amazing platform! Customer support was very helpful and responsive.",
        "Form validation errors are confusing and don't provide clear guidance.",
        "Love the new dashboard design. Much more user-friendly than before.",
        "Website performance is poor. Takes forever to complete any task.",
        "Thank you for the excellent service. The consultation was very thorough.",
    ]
    
    # Extended Hindi reviews with more variety
    hindi_reviews = [
        "рдпрд╣ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдмрд╣реБрдд рдзреАрдореА рд╣реИ рдФрд░ рдлреЙрд░реНрдо рднрд░рдирд╛ рдореБрд╢реНрдХрд┐рд▓ рд╣реИред",
        "рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╕рд┐рд╕реНрдЯрдо рд╣реИ! рд╕рдм рдХреБрдЫ рдЖрд╕рд╛рдиреА рд╕реЗ рд╣реЛ рдЧрдпрд╛ред",
        "рд▓реЙрдЧрд┐рди рдХрд░рдиреЗ рдореЗрдВ рдмрд╣реБрдд рдкрд░реЗрд╢рд╛рдиреА рд╣реБрдИред рдкрд╛рд╕рд╡рд░реНрдб рд░реАрд╕реЗрдЯ рдХрд╛рдо рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ред",
        "рд╢рд╛рдирджрд╛рд░ рд╕реЗрд╡рд╛! рдбреЙрдХреНрдпреВрдореЗрдВрдЯ рдЕрдкрд▓реЛрдб рдХрд░рдирд╛ рдмрд╣реБрдд рдЖрд╕рд╛рди рдерд╛ред",
        "рд╕рд┐рд╕реНрдЯрдо рдмрд╛рд░-рдмрд╛рд░ рдХреНрд░реИрд╢ рд╣реЛ рд░рд╣рд╛ рдерд╛ред рдмрд╣реБрдд рдирд┐рд░рд╛рд╢рд╛рдЬрдирдХ рдЕрдиреБрднрд╡ред",
        "рдмреЗрд╣рддрд░реАрди рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо! рдХрд╕реНрдЯрдорд░ рд╕рдкреЛрд░реНрдЯ рдЯреАрдо рдмрд╣реБрдд рд╕рд╣рд╛рдпрдХ рдереАред",
        "рдлреЙрд░реНрдо рдХреА рддреНрд░реБрдЯрд┐рдпрд╛рдВ рд╕рдордЭ рдирд╣реАрдВ рдЖрддреАрдВред рд╕реНрдкрд╖реНрдЯ рдирд┐рд░реНрджреЗрд╢ рдирд╣реАрдВ рд╣реИрдВред",
        "рдирдпрд╛ рдбрд┐рдЬрд╝рд╛рдЗрди рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╣реИред рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдЖрд╕рд╛рди рд╣реЛ рдЧрдпрд╛ред",
        "рд╡реЗрдмрд╕рд╛рдЗрдЯ рдХреА рдЧрддрд┐ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХреА рдЬрд░реВрд░рдд рд╣реИред рдмрд╣реБрдд рдзреАрдореА рд╣реИред",
        "рдЙрддреНрдХреГрд╖реНрдЯ рд╕реЗрд╡рд╛ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! рдкрд░рд╛рдорд░реНрд╢ рдмрд╣реБрдд рд╡рд┐рд╕реНрддреГрдд рдерд╛ред",
        "рдореЛрдмрд╛рдЗрд▓ рдРрдк рдареАрдХ рд╕реЗ рдХрд╛рдо рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ред рдХрдИ рд╕рдорд╕реНрдпрд╛рдПрдВ рд╣реИрдВред",
        "рд╕рд░рд▓ рдФрд░ рдЙрдкрдпреЛрдЧ рдореЗрдВ рдЖрд╕рд╛рдиред рдорд┐рдирдЯреЛрдВ рдореЗрдВ рдХрд╛рдо рдкреВрд░рд╛ рд╣реЛ рдЧрдпрд╛ред",
        "рд╕рд┐рд╕реНрдЯрдо рдореЗрдВ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛рдПрдВ рд╣реИрдВред рд╕реБрдзрд╛рд░ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред",
        "рдирдИ рд╕реБрд╡рд┐рдзрд╛рдПрдВ рдмрд╣реБрдд рдЙрдкрдпреЛрдЧреА рд╣реИрдВред рдкреНрд░рдХреНрд░рд┐рдпрд╛ рддреЗрдЬ рд╣реЛ рдЧрдИ рд╣реИред",
        "рд▓реЙрдЧрд┐рди рд╕рд┐рд╕реНрдЯрдо рдореЗрдВ рд╕реБрдзрд╛рд░ рдЪрд╛рд╣рд┐рдПред рдЕрдХреНрд╕рд░ рд▓реЙрдЧрдЖрдЙрдЯ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред",
        "рдореБрдЭреЗ рдЗрд╕ рдкреЛрд░реНрдЯрд▓ рд╕реЗ рдЕрдкрдирд╛ рдХрд╛рдо рдХрд░рдиреЗ рдореЗрдВ рдмрд╣реБрдд рд╕реБрд╡рд┐рдзрд╛ рд╣реБрдИред",
        "рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдордп рдмрд╣реБрдд рд▓рдЧрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдЗрд╕реЗ рддреЗрдЬрд╝ рдХрд░реЗрдВред",
        "рд╣реЗрд▓реНрдк рд╕реЗрдХреНрд╢рди рдореЗрдВ рдкрд░реНрдпрд╛рдкреНрдд рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред",
        "рдСрдирд▓рд╛рдЗрди рд╕рдкреЛрд░реНрдЯ рдЪреИрдЯ рдХрд╛ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдЯрд╛рдЗрдо рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╣реИред",
        "рдореИрдВ рдЗрд╕ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдХреЛ рдЕрдиреНрдп рд▓реЛрдЧреЛрдВ рдХреЛ рднреА рд╕реБрдЭрд╛рдКрдВрдЧрд╛ред"
    ]
    
    # Generate reviews with metadata
    reviews = []
    
    # Add English reviews
    for i, text in enumerate(english_reviews):
        review_id = f"EN_{i+1:03d}"
        timestamp = (datetime.now() - timedelta(days=random.randint(1, 30))).strftime("%Y-%m-%d %H:%M:%S")
        reviews.append({
            "review_id": review_id,
            "text": text,
            "timestamp": timestamp
        })
    
    # Add Hindi reviews
    for i, text in enumerate(hindi_reviews):
        review_id = f"HI_{i+1:03d}"
        timestamp = (datetime.now() - timedelta(days=random.randint(1, 30))).strftime("%Y-%m-%d %H:%M:%S")
        reviews.append({
            "review_id": review_id,
            "text": text,
            "timestamp": timestamp
        })
    
    # Shuffle for random distribution
    random.shuffle(reviews)
    
    return reviews

def save_sample_data():
    """Save sample data to CSV file."""
    try:
        # Generate reviews
        reviews = generate_sample_reviews()
        
        # Ensure data directory exists
        data_dir = Path(__file__).parent.parent / "data"
        data_dir.mkdir(exist_ok=True)
        
        # Save to CSV
        csv_path = data_dir / "sample_reviews.csv"
        
        with open(csv_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['review_id', 'text', 'timestamp']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for review in reviews:
                writer.writerow(review)
        
        print(f"тЬЕ Generated {len(reviews)} sample reviews")
        print(f"ЁЯУБ Saved to: {csv_path}")
        
        # Count languages
        hindi_count = sum(1 for r in reviews if r['review_id'].startswith('HI_'))
        english_count = sum(1 for r in reviews if r['review_id'].startswith('EN_'))
        
        print(f"ЁЯЗоЁЯЗ│ Hindi reviews: {hindi_count}")
        print(f"ЁЯЗ║ЁЯЗ╕ English reviews: {english_count}")
        
        # Print some examples
        print("\nЁЯУЭ Sample Reviews:")
        for i, review in enumerate(reviews[:4]):
            lang = "ЁЯЗоЁЯЗ│ Hindi" if review['review_id'].startswith('HI_') else "ЁЯЗ║ЁЯЗ╕ English"
            print(f"{i+1}. [{lang}] {review['text'][:50]}...")
        
        return str(csv_path)
        
    except Exception as e:
        print(f"тЭМ Error generating sample data: {e}")
        return None

if __name__ == "__main__":
    print("ЁЯФз Generating sample review data for MCA21 sentiment analysis...")
    save_sample_data()
